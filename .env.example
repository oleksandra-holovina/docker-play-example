# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set or it's being
# overwritten in development to make your life easier.

# Rather than use the directory name, let's control the name of the project.
export COMPOSE_PROJECT_NAME=helloplay

# You should generate a random string of 99+ characters for this value in prod.
# You can generate secure secrets by running: ./run flask secrets
export SECRET_KEY=y@RV=GawB[]QXlcW^KSXWheG8MarXukDi9I\;?bOcptl6YE?[pwI52\`bA/C4_OhIn

# When running in development mode
export BUILD_TARGET="app_assembly"
# When running in production mode
#export BUILD_TARGET="app"

# Which environment is running? It should be "development" or "production".
#export NODE_ENV=production
export NODE_ENV=development

# This lets you configure which host can access your application. In production
# you'll set it to your domain, such as .example.com. With a leading dot, the
# pattern will match example.com and all subdomains.
export ALLOWED_HOST="localhost:8000"

# The bind port for Akka.
#
# Be warned that if you change this value you'll need to change 8000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
export PLAY_HTTP_PORT=8000

# Should the Webpack watcher use polling? Not all Docker hosts support inotify.
# If your assets aren't updating in development then set this to true.
#export WEBPACK_WATCHER_POLL=false

# You'll always want to set POSTGRES_USER and POSTGRES_PASSWORD since the
# postgres Docker image uses them for its default database user and password.
export POSTGRES_USER=hello
export POSTGRES_PASSWORD=password
#export POSTGRES_HOST=postgres
#export POSTGRES_PORT=5432
#export POSTGRES_DB=hello

# Connection string to Redis. This will be used to connect directly to Redis and
# the cache back-end. You can split up your Redis servers later if needed.
#export REDIS_URL=redis://redis:6379/0

# Should Docker restart your containers if they go down in unexpected ways?
#export DOCKER_RESTART_POLICY=unless-stopped
export DOCKER_RESTART_POLICY=no

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
#export DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:8000/up
export DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 8000 then you
# can either stop that process or change 8000 to be something else.
#
# Use the default in production to avoid having akka server directly accessible
# to the internet since it'll very likely be behind nginx or a load balancer.
#export DOCKER_WEB_PORT_FORWARD=127.0.0.1:8000
export DOCKER_WEB_PORT_FORWARD=8000

# What volume path should we use? In dev we want to volume mount everything
# so that we can develop our code without rebuilding our Docker images.
#export DOCKER_WEB_VOLUME=./public:/app/public
export DOCKER_WEB_VOLUME=.:/app

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
#export DOCKER_POSTGRES_CPUS=0
#export DOCKER_POSTGRES_MEMORY=0
#export DOCKER_REDIS_CPUS=0
#export DOCKER_REDIS_MEMORY=0
#export DOCKER_WEB_CPUS=0
#export DOCKER_WEB_MEMORY=0
