#!/usr/bin/env bash

set -eo pipefail

DC="${DC:-exec}"

# If we're running in CI we need to disable TTY allocation for docker-compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _dc {
  docker-compose "${DC}" ${TTY} "${@}"
}

function _build_run_down {
  docker-compose build
  docker-compose run ${TTY} "${@}"
  docker-compose down
}

# -----------------------------------------------------------------------------

function cmd {
  # Run any command you want in the web container
  _dc web "${@}"
}

function sbt {
  # Run any sbt commands
  cmd sbt "${@}"
}

function secret {
  # Generate a random secret that can be used for your SECRET_KEY and more.
  # sed commands are needed to escape ; and `. If you find any other characters
  # that need escaping please open an issue.
  sbt playGenerateSecret | grep "Generated new secret:" | cut -d " " -f 4 \
     | sed "s/;/\\\;/g" | sed "s/\`/\\\\\`/g"
}

function scalastyle {
  # Lint Scala code
  sbt scalastyle
}

function test {
  # Run test suite
  sbt test "${@}"
}

function test-cov {
  # Get test coverage
  sbt coverage test "${@}"
}

function bash {
  # Start a Bash session in the web container
  cmd bash "${@}"
}

function psql {
  # Connect to PostgreSQL with psql
  # shellcheck disable=SC1091
  . .env
 _dc postgres psql -U "${POSTGRES_USER}" "${@}"
}

function redis-cli {
  # Connect to Redis with redis-cli
  _dc redis redis-cli "${@}"
}

function outdated {
  # List any installed packages that are outdated
  sbt dependencyUpdates
}

function sbt:reload {
  # Reload sbt dependencies
  _build_run_down web sbt reload
}

function yarn:install {
  # Install yarn dependencies and write lock file
  _build_run_down webpack yarn install
}

function yarn:outdated {
  # List any installed packages that are outdated
  _dc webpack yarn outdated
}

function clean {
  # Remove cache and other machine generates files
  sbt clean
  rm -rf public/*
  touch public/.keep
}

function ci:install-deps {
  # Install Continuous Integration (CI) dependencies
  sudo apt-get install -y curl shellcheck
  sudo curl \
    -L https://raw.githubusercontent.com/nickjj/wait-until/v0.1.2/wait-until \
    -o /usr/local/bin/wait-until && sudo chmod +x /usr/local/bin/wait-until
}

function ci:test {
  # Execute Continuous Integration (CI) pipeline
  #
  # It's expected that your CI environment has these tools available:
  #   - https://github.com/koalaman/shellcheck
  #   - https://github.com/nickjj/wait-until
  shellcheck run bin/*

  cp --no-clobber .env.example .env
  cp --no-clobber docker-compose.override.yml.example docker-compose.override.yml

  docker-compose build
  docker-compose up -d

  # shellcheck disable=SC1091
  . .env
  wait-until "docker-compose exec -T \
    -e PGPASSWORD=${POSTGRES_PASSWORD} postgres \
    psql -U ${POSTGRES_USER} ${POSTGRES_USER} -c 'SELECT 1'"

  scalastyle "${@}"
  test "${@}"
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
